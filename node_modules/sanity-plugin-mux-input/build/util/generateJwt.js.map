{"version":3,"sources":["../../src/util/generateJwt.js"],"names":["getPrivateKey","key","Buffer","from","generateJwt","playbackId","signingKeyId","signingKeyPrivate","aud","payload","jwt","sign","algorithm","keyid","audience","subject","noTimestamp","expiresIn"],"mappings":";;;;;;;AAAA;;;;;;AAEA,IAAMA,aAAa,GAAIC,GAAD,IAASC,MAAM,CAACC,IAAP,CAAYF,GAAZ,EAAiB,QAAjB,CAA/B;;AAEA,IAAMG,WAAW,GAAG,SAAdA,WAAc,CAACC,UAAD,EAAaC,YAAb,EAA2BC,iBAA3B,EAA8CC,GAA9C;AAAA,MAAmDC,OAAnD,uEAA6D,EAA7D;AAAA,SAClBC,GAAG,CAACC,IAAJ,CAASF,OAAT,EAAkBT,aAAa,CAACO,iBAAD,CAA/B,EAAoD;AAClDK,IAAAA,SAAS,EAAE,OADuC;AAElDC,IAAAA,KAAK,EAAEP,YAF2C;AAGlDQ,IAAAA,QAAQ,EAAEN,GAHwC;AAIlDO,IAAAA,OAAO,EAAEV,UAJyC;AAKlDW,IAAAA,WAAW,EAAE,IALqC;AAMlDC,IAAAA,SAAS,EAAE;AANuC,GAApD,CADkB;AAAA,CAApB;;eAUeb,W","sourcesContent":["import * as jwt from 'jsonwebtoken'\n\nconst getPrivateKey = (key) => Buffer.from(key, 'base64')\n\nconst generateJwt = (playbackId, signingKeyId, signingKeyPrivate, aud, payload = {}) =>\n  jwt.sign(payload, getPrivateKey(signingKeyPrivate), {\n    algorithm: 'RS256',\n    keyid: signingKeyId,\n    audience: aud,\n    subject: playbackId,\n    noTimestamp: true,\n    expiresIn: '12h',\n  })\n\nexport default generateJwt\n"],"file":"generateJwt.js"}