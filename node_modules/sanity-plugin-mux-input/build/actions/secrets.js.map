{"version":3,"sources":["../../src/actions/secrets.js"],"names":["cache","secrets","exists","fetchSecrets","Promise","resolve","client","fetch","then","Boolean","token","secretKey","enableSignedUrls","signingKeyId","signingKeyPrivate","saveSecrets","doc","_id","_type","createOrReplace","createSigningKeys","dataset","clientConfig","request","url","withCredentials","method","testSecrets","haveValidSigningKeys","res","data","id","e","console","error","testSecretsObservable","observable"],"mappings":"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","sourcesContent":["import {defer} from 'rxjs'\nimport client from '../clients/SanityClient'\n\nconst cache = {\n  secrets: null,\n  exists: false,\n}\n\nexport function fetchSecrets() {\n  if (cache.exists) {\n    return Promise.resolve(cache)\n  }\n\n  return client.fetch('*[_id == \"secrets.mux\"][0]').then((secrets) => {\n    cache.exists = Boolean(secrets)\n    cache.secrets = {\n      token: secrets?.token || null,\n      secretKey: secrets?.secretKey || null,\n      enableSignedUrls: secrets?.enableSignedUrls || false,\n      signingKeyId: secrets?.signingKeyId || null,\n      signingKeyPrivate: secrets?.signingKeyPrivate || null,\n    }\n    return cache\n  })\n}\n\nexport function saveSecrets(token, secretKey, enableSignedUrls, signingKeyId, signingKeyPrivate) {\n  const doc = {\n    _id: 'secrets.mux',\n    _type: 'mux.apiKey',\n    token,\n    secretKey,\n    enableSignedUrls,\n    signingKeyId,\n    signingKeyPrivate,\n  }\n\n  return client.createOrReplace(doc).then(() => {\n    cache.exists = true\n    cache.secrets = {\n      token,\n      secretKey,\n      enableSignedUrls,\n      signingKeyId,\n      signingKeyPrivate,\n    }\n    return cache.secrets\n  })\n}\n\nexport function createSigningKeys() {\n  const dataset = client.clientConfig.dataset\n  return client.request({\n    url: `/addons/mux/signing-keys/${dataset}`,\n    withCredentials: true,\n    method: 'POST',\n  })\n}\n\nexport function testSecrets() {\n  const dataset = client.clientConfig.dataset\n  return client.request({\n    url: `/addons/mux/secrets/${dataset}/test`,\n    withCredentials: true,\n    method: 'GET',\n  })\n}\n\nexport async function haveValidSigningKeys(signingKeyId, signingKeyPrivate) {\n  if (!(signingKeyId && signingKeyPrivate)) {\n    return false\n  }\n\n  const dataset = client.clientConfig.dataset\n  try {\n    const res = await client.request({\n      url: `/addons/mux/signing-keys/${dataset}/${signingKeyId}`,\n      withCredentials: true,\n      method: 'GET',\n    })\n    //\n    // if this signing key is valid it will return { data: { id: 'xxxx' } }\n    //\n    return !!(res.data && res.data.id)\n  } catch (e) {\n    console.error('Error fetching signingKeyId', signingKeyId, 'assuming it is not valid')\n    return false\n  }\n}\n\nexport function testSecretsObservable() {\n  const dataset = client.clientConfig.dataset\n  return defer(() =>\n    client.observable.request({\n      url: `/addons/mux/secrets/${dataset}/test`,\n      withCredentials: true,\n      method: 'GET',\n    })\n  )\n}\n"],"file":"secrets.js"}