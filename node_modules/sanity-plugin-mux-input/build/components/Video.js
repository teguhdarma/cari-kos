"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ui = require("@sanity/ui");

var _hls = _interopRequireDefault(require("hls.js"));

require("media-chrome");

var _default2 = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _bar = _interopRequireDefault(require("part:@sanity/components/progress/bar"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _assets = require("../actions/assets");

var _secrets = require("../actions/secrets");

var _getPosterSrc = _interopRequireDefault(require("../util/getPosterSrc"));

var _getStoryboardSrc = _interopRequireDefault(require("../util/getStoryboardSrc"));

var _getVideoSrc = _interopRequireDefault(require("../util/getVideoSrc"));

var _Video = _interopRequireDefault(require("./Video.css"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var NOOP = () => {
  /* intentional noop */
};

var propTypes = {
  // eslint-disable-next-line react/forbid-prop-types
  assetDocument: _propTypes.default.object.isRequired,
  autoload: _propTypes.default.bool,
  onCancel: _propTypes.default.func,
  onReady: _propTypes.default.func
};

class MuxVideo extends _react.Component {
  constructor(props) {
    super(props);

    _defineProperty(this, "videoContainer", /*#__PURE__*/_react.default.createRef());

    _defineProperty(this, "hls", null);

    _defineProperty(this, "handleVideoClick", event => {
      this.setState({
        showControls: true
      });
      this.hls.startLoad(0);

      if (this.props.onReady) {
        this.props.onReady(event);
      }
    });

    _defineProperty(this, "handleCancelButtonClicked", event => {
      if (this.props.onCancel) {
        this.props.onCancel(event);
      }
    });

    this.state = {
      storyboardUrl: null,
      posterUrl: null,
      source: null,
      isLoading: true,
      error: null,
      isDeletedOnMux: false,
      isPreparingStaticRenditions: false,
      secrets: null
    };
    this.playRef = /*#__PURE__*/_react.default.createRef();
    this.muteRef = /*#__PURE__*/_react.default.createRef();
  } // eslint-disable-next-line complexity


  static getDerivedStateFromProps(nextProps) {
    var _assetDocument$data, _assetDocument$data$s, _assetDocument$data2, _assetDocument$data2$;

    var isLoading = true;
    var isPreparingStaticRenditions = false;
    var assetDocument = nextProps.assetDocument;

    if (assetDocument && assetDocument.status === 'preparing') {
      isLoading = 'Preparing the video';
    }

    if (assetDocument && assetDocument.status === 'waiting_for_upload') {
      isLoading = 'Waiting for upload to start';
    }

    if (assetDocument && assetDocument.status === 'waiting') {
      isLoading = 'Processing upload';
    }

    if (assetDocument && assetDocument.status === 'ready') {
      isLoading = false;
    }

    if (assetDocument && typeof assetDocument.status === 'undefined') {
      isLoading = false;
    }

    if ((assetDocument === null || assetDocument === void 0 ? void 0 : (_assetDocument$data = assetDocument.data) === null || _assetDocument$data === void 0 ? void 0 : (_assetDocument$data$s = _assetDocument$data.static_renditions) === null || _assetDocument$data$s === void 0 ? void 0 : _assetDocument$data$s.status) === 'preparing') {
      isPreparingStaticRenditions = true;
    }

    if ((assetDocument === null || assetDocument === void 0 ? void 0 : (_assetDocument$data2 = assetDocument.data) === null || _assetDocument$data2 === void 0 ? void 0 : (_assetDocument$data2$ = _assetDocument$data2.static_renditions) === null || _assetDocument$data2$ === void 0 ? void 0 : _assetDocument$data2$.status) === 'ready') {
      isPreparingStaticRenditions = false;
    }

    return {
      isLoading,
      isPreparingStaticRenditions
    };
  }

  componentDidMount() {
    var _this$playRef, _this$playRef$current, _this$muteRef, _this$muteRef$current;

    this.video = /*#__PURE__*/_react.default.createRef();
    var style = document.createElement('style');
    style.innerHTML = 'button svg { vertical-align: middle; }';

    if ((_this$playRef = this.playRef) !== null && _this$playRef !== void 0 && (_this$playRef$current = _this$playRef.current) !== null && _this$playRef$current !== void 0 && _this$playRef$current.shadowRoot) {
      this.playRef.current.shadowRoot.appendChild(style);
    }

    if ((_this$muteRef = this.muteRef) !== null && _this$muteRef !== void 0 && (_this$muteRef$current = _this$muteRef.current) !== null && _this$muteRef$current !== void 0 && _this$muteRef$current.shadowRoot) {
      this.muteRef.current.shadowRoot.appendChild(style.cloneNode(true));
    }

    this.setState(MuxVideo.getDerivedStateFromProps(this.props));
    (0, _secrets.fetchSecrets)().then(_ref => {
      var secrets = _ref.secrets;
      return this.setState({
        secrets
      });
    });
  }

  componentDidUpdate(prevProps, prevState) {
    var previousVideo = prevProps.assetDocument.playbackId;
    var newVideo = this.props.assetDocument.playbackId;

    if (!this.state.isLoading && this.state.secrets && (this.state.source === null || previousVideo !== newVideo)) {
      this.resolveSourceAndPoster(this.props.assetDocument);
    }

    if (this.state.source !== null && this.video.current && !this.video.current.src) {
      // eslint-disable-next-line react/no-did-update-set-state
      this.setState({
        error: null
      });
      this.attachVideo();
    }

    if (this.state.source !== null && this.state.source !== prevState.source) {
      // eslint-disable-next-line react/no-did-update-set-state
      this.setState({
        error: null,
        showControls: false
      });

      if (this.hls) {
        this.hls.destroy();
      }

      this.attachVideo();
    }
  }

  resolveSourceAndPoster(assetDocument) {
    var playbackId = assetDocument.playbackId;
    var options = {
      isSigned: assetDocument.data.playback_ids[0].policy === 'signed',
      signingKeyId: this.state.secrets.signingKeyId || null,
      signingKeyPrivate: this.state.secrets.signingKeyPrivate || null
    };
    var source = (0, _getVideoSrc.default)(playbackId, options);
    var posterUrl = (0, _getPosterSrc.default)(playbackId, options);
    var storyboardUrl = (0, _getStoryboardSrc.default)(playbackId, options);
    this.setState({
      source,
      posterUrl,
      storyboardUrl
    });
  }

  getVideoElement() {
    return this.video && this.video.current;
  }

  attachVideo() {
    var _this$props = this.props,
        assetDocument = _this$props.assetDocument,
        autoload = _this$props.autoload;

    if (_hls.default.isSupported()) {
      this.hls = new _hls.default({
        autoStartLoad: autoload
      });
      this.hls.loadSource(this.state.source);
      this.hls.attachMedia(this.video.current);
      this.hls.on(_hls.default.Events.MANIFEST_PARSED, e => {
        if (this.videoContainer.current) {
          this.videoContainer.current.style.display = 'block';
        }

        if (this.props.onReady) {
          this.props.onReady();
        }
      });
      this.hls.on(_hls.default.Events.ERROR, (event, data) => {
        switch (data.type) {
          case _hls.default.ErrorTypes.NETWORK_ERROR:
            if (this.videoContainer.current) {
              this.videoContainer.current.style.display = 'none';
            }

            this.setState({
              error: data
            });
            (0, _assets.getAsset)(assetDocument.assetId).then(response => {
              this.setState({
                isDeletedOnMux: false
              });
            }).catch(err => {
              if (err.message.match(/404/)) {
                this.setState({
                  isDeletedOnMux: true
                });
                return;
              }

              console.error(data, err); // eslint-disable-line no-console
            });
            break;

          default:
            console.error(data);
          // eslint-disable-line no-console
        }
      });
    } else if (this.video.current.canPlayType('application/vnd.apple.mpegurl')) {
      this.video.current.src = this.state.source;
      this.video.current.addEventListener('loadedmetadata', () => {
        this.hls.loadSource(this.state.source);
        this.hls.attachMedia(this.video.current);
      });
    }
  }

  // eslint-disable-next-line complexity
  render() {
    var _this$state = this.state,
        posterUrl = _this$state.posterUrl,
        isLoading = _this$state.isLoading,
        error = _this$state.error;
    var _this$props2 = this.props,
        assetDocument = _this$props2.assetDocument,
        autoload = _this$props2.autoload;

    if (!assetDocument || !assetDocument.status) {
      return null;
    }

    if (isLoading) {
      return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
        className: _Video.default.progressBar
      }, /*#__PURE__*/_react.default.createElement(_bar.default, {
        percent: 100,
        text: isLoading !== true && isLoading || 'Waiting for Mux to complete the file',
        isInProgress: true,
        showPercent: true,
        animation: true,
        color: "primary"
      })), /*#__PURE__*/_react.default.createElement("div", {
        className: _Video.default.uploadCancelButton
      }, /*#__PURE__*/_react.default.createElement(_default2.default, {
        onClick: this.handleCancelButtonClicked
      }, "Cancel")));
    }

    var showControls = autoload || this.state.showControls;
    return /*#__PURE__*/_react.default.createElement("div", {
      ref: this.videoContainer,
      className: _Video.default.videoContainer
    }, /*#__PURE__*/_react.default.createElement("media-controller", null, /*#__PURE__*/_react.default.createElement("video", {
      onClick: autoload ? NOOP : this.handleVideoClick,
      ref: this.video,
      poster: posterUrl,
      slot: "media",
      crossOrigin: "anonomous"
    }, this.state.storyboardUrl && /*#__PURE__*/_react.default.createElement("track", {
      label: "thumbnails",
      default: true,
      kind: "metadata",
      src: this.state.storyboardUrl
    })), showControls && /*#__PURE__*/_react.default.createElement("media-control-bar", null, /*#__PURE__*/_react.default.createElement("media-play-button", {
      ref: this.playRef
    }), /*#__PURE__*/_react.default.createElement("media-mute-button", {
      ref: this.muteRef
    }), /*#__PURE__*/_react.default.createElement("media-progress-range", null))), error && /*#__PURE__*/_react.default.createElement(_ui.Card, {
      padding: 3,
      radius: 2,
      shadow: 1,
      tone: "critical",
      marginTop: 2
    }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 2
    }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
      size: 1
    }, "There was an error loading this video (", error.type, ")."), this.state.isDeletedOnMux && /*#__PURE__*/_react.default.createElement(_ui.Text, {
      size: 1
    }, "The video is deleted on Mux"))), this.state.isPreparingStaticRenditions && /*#__PURE__*/_react.default.createElement(_ui.Card, {
      padding: 2,
      radius: 1,
      style: {
        background: 'var(--card-fg-color)',
        position: 'absolute',
        top: '0.5em',
        left: '0.5em'
      }
    }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
      size: 1,
      style: {
        color: 'var(--card-bg-color)'
      }
    }, "MUX is preparing static renditions, please stand by")));
  }

}

MuxVideo.propTypes = propTypes;
MuxVideo.defaultProps = {
  autoload: true,
  onCancel: undefined,
  onReady: undefined
};
var _default = MuxVideo;
exports.default = _default;
//# sourceMappingURL=Video.js.map